# This is an InternalUsersSendingMalwarePolicy Inspector.

# Date: 25-1-2023
# Version: 1.0
# Product Family: Microsoft Exchange
# Purpose: Checks if a policy exists that checks and handles upon users that send malware
# Author: Leonardo van de Weteringh

# Enables error handling if you have the Write-ErrorLog script in the parent directory
$errorHandling = "$((Get-Item $PSScriptRoot).Parent.FullName)\Write-ErrorLog.ps1"

# Sets the Action Preference when an error occurs. Default is Stop
$ErrorActionPreference = "Stop"

# Calls the Error Handling to check if it is existing
. $errorHandling

function Build-InternalUsersSendingMalwarePolicy($findings)
{
	#Actual Inspector Object that will be returned. All object values are required to be filled in.
	$inspectorobject = New-Object PSObject -Property @{
		ID			     = "M365SATFMEX0037"
		FindingName	     = "Malware Filter Policies Don't Alert for Internal Users Sending Malware"
		ProductFamily    = "Microsoft Exchange"
		CVS			     = "2.0"
		Description	     = "Malware being sent by an internal user's email account is often an indication that a security event has occurred. For this reason, it is strongly recommended that each organization have malware filter policies that alert administrators when malware is being sent by an internal user's account. It is possible to configure malware filter policies in O365 that generate these alerts. The malware filter policies listed herein do not alert an administrator when an internal user sends malware."
		Remediation	     = "Configure a MalwareFilterPolicy by using the PowerShellScript"
		PowerShellScript = 'Set-MalwareFilterPolicy -Identity "Malware Filter Policy Name" -Action DeleteMessage -EnableInternalSenderAdminNotifications $true -InternalSenderAdminAddress "admin@yourdomain.com"'
		DefaultValue	 = "False"
		ExpectedValue    = "True, with a configured mailbox or distribution list address"
		ReturnedValue    = $findings
		Impact		     = "Low"
		RiskRating	     = "Low"
		References	     = @(@{ 'Name' = 'Configuring Exchange Online Protection'; 'URL' = "https://practical365.com/first-steps-configuring-exchange-online-protection/" },
			@{ 'Name' = 'Set-MalwareFilterPolicy Commandlet Reference Example 1'; 'URL' = "https://docs.microsoft.com/en-us/powershell/module/exchange/set-malwarefilterpolicy?view=exchange-ps" })
	}
	return $inspectorobject
}

function Inspect-InternalUsersSendingMalwarePolicy
{
	Try
	{
		
		$enabled_malware_filters = Get-MalwareFilterPolicy | Where-Object { $_.EnableInternalSenderAdminNotifications -eq $true }
		
		$non_alerting_filters = Get-MalwareFilterPolicy | Where-Object { $_.EnableInternalSenderAdminNotifications -eq $false }
		
		$flag = $false
		
		$findings = @()
		
		foreach ($filter in $enabled_malware_filters)
		{
			#$result = Get-MalwareFilterRule
			foreach ($filter in $enabled_malware_filters)
			{
				If (($filter.IsDefault -eq $false) -and ((Get-MalwareFilterRule -Identity $filter.name).State -eq "Enabled"))
				{
					$flag = $true
				}
				Else
				{
					$findings += Write-Output "Malware filter named $($filter.Name); Admin Address: `$null, NotificationsEnabled: $($filter.EnableInternalSenderAdminNotifications)"
				}
			}
		}
		
		If ($flag -eq $false)
		{
			ForEach ($filter in $non_alerting_filters)
			{
				If ((-NOT $filter.InternalSenderAdminAddress) -and (-NOT $filter.EnableInternalSenderAdminNotifications))
				{
					$findings += Write-Output "Malware filter named $($filter.Name); Admin Address: `$null, NotificationsEnabled: $($filter.EnableInternalSenderAdminNotifications)"
				}
			}
			
			If ($findings.Count -NE 0)
			{
				$endobject = Build-InternalUsersSendingMalwarePolicy($findings)
				return $endobject
			}
		}
		
		return $null
		
	}
	Catch
	{
		Write-Warning "Error message: $_"
		$message = $_.ToString()
		$exception = $_.Exception
		$strace = $_.ScriptStackTrace
		$failingline = $_.InvocationInfo.Line
		$positionmsg = $_.InvocationInfo.PositionMessage
		$pscommandpath = $_.InvocationInfo.PSCommandPath
		$failinglinenumber = $_.InvocationInfo.ScriptLineNumber
		$scriptname = $_.InvocationInfo.ScriptName
		Write-Verbose "Write to log"
		Write-ErrorLog -message $message -exception $exception -scriptname $scriptname
		Write-Verbose "Errors written to log"
	}
	
}

return Inspect-InternalUsersSendingMalwarePolicy


