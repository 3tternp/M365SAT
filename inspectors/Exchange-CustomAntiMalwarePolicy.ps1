# This is an CustomAntiMalwarePolicy Inspector.

# Date: 25-1-2023
# Version: 1.0
# Product Family: Microsoft Exchange
# Purpose: Checks if the AntiMalware Policy is present
# Author: Leonardo van de Weteringh

# Enables error handling if you have the Write-ErrorLog script in the parent directory
$errorHandling = "$((Get-Item $PSScriptRoot).Parent.FullName)\Write-ErrorLog.ps1"

# Sets the Action Preference when an error occurs. Default is Stop
$ErrorActionPreference = "Stop"

# Calls the Error Handling to check if it is existing
. $errorHandling

function Build-CustomAntiMalwarePolicy($findings)
{
	#Actual Inspector Object that will be returned. All object values are required to be filled in.
	$inspectorobject = New-Object PSObject -Property @{
		ID			     = "M365SATFMEX0017"
		FindingName	     = "No (Custom) Anti-Malware Policy Present"
		ProductFamily    = "Microsoft Exchange"
		CVS			     = "0.0"
		Description	     = "It is possible to create custom anti-malware policies in Exchange Online to provide additional protection against threats that may be received via email. No anti-malware policy besides the Microsoft Default Anti-Malware Policy was detected in the O365 Tenant. Although the default anti-malware policy can provide some protection, each organization should consider creating an anti-malware policy that is customized to suit the nature of their day-to-day activities."
		Remediation	     = "Follow the 'Configure anti-malware policies in Exchange Online Protection' guide below for a full introduction to creating a custom anti-malware policy. It is possible to create an anti-malware policy and enable it through the Exchange administration center or via Exchange Online PowerShell using the Set-MalwareFilterPolicy or New-MalwareFilterPolicy commands."
		PowerShellScript = 'Set-MalwareFilterPolicy -Identity "Default" -Action DeleteAttachmentAndUseDefaultAlertText -EnableFileFilter $true -FileTypes ".cpl", ".ace", ".app", ".docm", ".exe", ".jar", ".reg", ".scr", ".vbe", ".vbs", ".bat", ".msi", ".ani", ".dll", ".lnf", ".mdb", ".ws", ".cmd", ".com", ".crt", ".dos", ".lns", ".ps1", ".wsh", ".wsc" -EnableExternalSenderNotifications $true -EnableInternalSenderNotifications $true'
		DefaultValue	 = "No Anti-Malware Policy"
		ExpectedValue    = "An Anti-Malware Policy"
		ReturnedValue    = "No AntiPhish Policy Available"
		Impact		     = "Informational"
		RiskRating	     = "Informational"
		References	     = @(@{ 'Name' = 'Configure anti-malware policies in Exchange Online Protection'; 'URL' = 'https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/configure-anti-malware-policies?view=o365-worldwide' },
			@{ 'Name' = 'Anti-malware protection in EOP'; 'URL' = 'https://docs.microsoft.com/en-us/microsoft-365/security/office-365-security/anti-malware-protection?view=o365-worldwide' },
			@{ 'Name' = 'New-MalwareFilterPolicy'; 'URL' = 'https://docs.microsoft.com/en-us/powershell/module/exchange/new-malwarefilterpolicy?view=exchange-ps' })
	}
	return $inspectorobject
}


function Inspect-CustomAntiMalwarePolicy
{
	Try
	{
		
		$policies = Get-MalwareFilterPolicy
		
		$customPolicies = @()
		
		$defaultPolicies = @()
		
		foreach ($policy in $policies)
		{
			$customPolicies += ($policy | Where-Object { ($_.IsDefault -eq $false) -and ($_.Name -notmatch "Preset") }).Name
			$defaultPolicies += ($policy | Where-Object { ($_.IsDefault -eq $true) -or (($_.IsDefault -eq $false) -and ($_.Name -like "*Preset*")) }).Name
		}
		
		if (($customPolicies | Measure-Object).Count -gt 0)
		{
			Return $null
		}
		Else
		{
			$endobject = Build-CustomAntiMalwarePolicy($defaultPolicies)
			Return $endobject
		}
		
	}
	Catch
	{
		Write-Warning "Error message: $_"
		$message = $_.ToString()
		$exception = $_.Exception
		$strace = $_.ScriptStackTrace
		$failingline = $_.InvocationInfo.Line
		$positionmsg = $_.InvocationInfo.PositionMessage
		$pscommandpath = $_.InvocationInfo.PSCommandPath
		$failinglinenumber = $_.InvocationInfo.ScriptLineNumber
		$scriptname = $_.InvocationInfo.ScriptName
		Write-Verbose "Write to log"
		Write-ErrorLog -message $message -exception $exception -scriptname $scriptname
		Write-Verbose "Errors written to log"
	}
	
}

return Inspect-CustomAntiMalwarePolicy


